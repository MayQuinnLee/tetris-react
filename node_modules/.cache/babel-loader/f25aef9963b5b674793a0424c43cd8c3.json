{"ast":null,"code":"import _slicedToArray from \"/Users/jovangoh/Desktop/tetris-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  const _useState = useState(createStage()),\n        _useState2 = _slicedToArray(_useState, 2),\n        stage = _useState2[0],\n        setStage = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rowsCleared = _useState4[0],\n        setRowsCleared = _useState4[1];\n\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = (newStage //map through newStage with reduce\n    ) => newStage.reduce((acc, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        //if we find a row to clear\n        setRowsCleared(prev => prev + 1);\n        acc.unshift(new Array(newStage[0].length.fill([0, \"clear\"]))); //for each iteration in the reducer, return accumulator\n\n        return acc;\n      } //no row to be cleared\n\n\n      acc.push(row);\n      return acc;\n    });\n\n    const updateStage = prevStage => {\n      //first clear 'flush' the stage\n      //multidimensional array hence 2 maps, if performance is priority use for loop\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === \"clear\" ? [0, \"clear\"] : cell)); //refer to gamehelper for cell[1]\n      //draw the tetromino, getting to know the tetromino pass down\n      //player from usePlayer() to Tetris.js to useStage\n      //y is the index number\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [//the coordinate on the stage\n            value, `${player.collided ? \"merged\" : \"clear\"}` //checking the stage to merge with the tetromino or not\n            ];\n          }\n        });\n      });\n\n      if (player.collided) {\n        resetPlayer(); //move the player to the top, and the old tetromino will stay at the bottom\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]); // }, [player.pos.y, player.pos.x, player.tetromino, player.collided]);\n  //if the tetromino happen to be the same, then it will not appear (bug)\n\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/Users/jovangoh/Desktop/tetris-react/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","acc","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","pos","collided"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAAA,oBACrBL,QAAQ,CAACE,WAAW,EAAZ,CADa;AAAA;AAAA,QACxCI,KADwC;AAAA,QACjCC,QADiC;;AAAA,qBAETP,QAAQ,CAAC,CAAD,CAFC;AAAA;AAAA,QAExCQ,WAFwC;AAAA,QAE3BC,cAF2B;;AAI/CR,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,cAAc,CAAC,CAAD,CAAd;;AAEA,UAAMC,SAAS,GAAG,CAChBC,QADgB,CACP;AADO,SAGhBA,QAAQ,CAACC,MAAT,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,UAAIA,GAAG,CAACC,SAAJ,CAAeC,IAAD,IAAUA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAApC,MAA2C,CAAC,CAAhD,EAAmD;AACjD;AACAP,QAAAA,cAAc,CAAEQ,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAd;AACAJ,QAAAA,GAAG,CAACK,OAAJ,CAAY,IAAIC,KAAJ,CAAUR,QAAQ,CAAC,CAAD,CAAR,CAAYS,MAAZ,CAAmBC,IAAnB,CAAwB,CAAC,CAAD,EAAI,OAAJ,CAAxB,CAAV,CAAZ,EAHiD,CAIjD;;AACA,eAAOR,GAAP;AACD,OAP2B,CAQ5B;;;AACAA,MAAAA,GAAG,CAACS,IAAJ,CAASR,GAAT;AACA,aAAOD,GAAP;AACD,KAXD,CAHF;;AAgBA,UAAMU,WAAW,GAAIC,SAAD,IAAe;AACjC;AACA;AACA,YAAMb,QAAQ,GAAGa,SAAS,CAACC,GAAV,CAAeX,GAAD,IAC7BA,GAAG,CAACW,GAAJ,CAAST,IAAD,IAAWA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAxD,CADe,CAAjB,CAHiC,CAMjC;AAEA;AACA;AACA;;AACAZ,MAAAA,MAAM,CAACsB,SAAP,CAAiBC,OAAjB,CAAyB,CAACb,GAAD,EAAMc,CAAN,KAAY;AACnCd,QAAAA,GAAG,CAACa,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACxB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACflB,YAAAA,QAAQ,CAACiB,CAAC,GAAGxB,MAAM,CAAC2B,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAG1B,MAAM,CAAC2B,GAAP,CAAWD,CAA1C,IAA+C,CAC7C;AACAD,YAAAA,KAF6C,EAG5C,GAAEzB,MAAM,CAAC4B,QAAP,GAAkB,QAAlB,GAA6B,OAAQ,EAHK,CAI7C;AAJ6C,aAA/C;AAMD;AACF,SATD;AAUD,OAXD;;AAaA,UAAI5B,MAAM,CAAC4B,QAAX,EAAqB;AACnB3B,QAAAA,WAAW,GADQ,CAEnB;AACD;;AACD,aAAOM,QAAP;AACD,KA7BD;;AA+BAJ,IAAAA,QAAQ,CAAEU,IAAD,IAAUM,WAAW,CAACN,IAAD,CAAtB,CAAR;AACD,GAnDQ,EAmDN,CAACb,MAAD,EAASC,WAAT,CAnDM,CAAT,CAJ+C,CAwD/C;AACA;;AAEA,SAAO,CAACC,KAAD,EAAQC,QAAR,CAAP;AACD,CA5DM","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = (\n      newStage //map through newStage with reduce\n    ) =>\n      newStage.reduce((acc, row) => {\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\n          //if we find a row to clear\n          setRowsCleared((prev) => prev + 1);\n          acc.unshift(new Array(newStage[0].length.fill([0, \"clear\"])));\n          //for each iteration in the reducer, return accumulator\n          return acc;\n        }\n        //no row to be cleared\n        acc.push(row);\n        return acc;\n      });\n\n    const updateStage = (prevStage) => {\n      //first clear 'flush' the stage\n      //multidimensional array hence 2 maps, if performance is priority use for loop\n      const newStage = prevStage.map((row) =>\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n      );\n      //refer to gamehelper for cell[1]\n\n      //draw the tetromino, getting to know the tetromino pass down\n      //player from usePlayer() to Tetris.js to useStage\n      //y is the index number\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              //the coordinate on the stage\n              value,\n              `${player.collided ? \"merged\" : \"clear\"}`,\n              //checking the stage to merge with the tetromino or not\n            ];\n          }\n        });\n      });\n\n      if (player.collided) {\n        resetPlayer();\n        //move the player to the top, and the old tetromino will stay at the bottom\n      }\n      return newStage;\n    };\n\n    setStage((prev) => updateStage(prev));\n  }, [player, resetPlayer]);\n  // }, [player.pos.y, player.pos.x, player.tetromino, player.collided]);\n  //if the tetromino happen to be the same, then it will not appear (bug)\n\n  return [stage, setStage];\n};\n"]},"metadata":{},"sourceType":"module"}