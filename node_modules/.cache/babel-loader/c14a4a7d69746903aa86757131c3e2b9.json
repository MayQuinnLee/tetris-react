{"ast":null,"code":"export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20; // function to create the stage\n//multi-dimensional array to create the grid\n//Array from something, another array 'stageHeight'\n//for each row, create a new array 'stageWidth, and fill it with another array\n//fill 0 means nothing, clear going to merge, tetromino that collided\n\nexport const createStage = () => Array.from(Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill([0, \"clear\"]));\nexport const checkCollision = (player, stage, {\n  x: moveX,\n  y: moveY\n}) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino.length; x += 1) {\n      //1. Check that we're on a actual tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if ( //2. Check that our move is inside the game area (y)\n        !stage[y + player.pos.y + moveY] || //3. Check that our move is inside the game area width (x)\n        !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] || //4. Check that the call we're moving is set to 'clear'\n        stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== \"clear\") {\n          return true; //the above happen then it is collided 'true'\n        }\n      }\n    }\n  }\n}; // console.log(createStage());\n// [[[0,'clear']],[[0,'clear']],[[0,'clear']],[[0,'clear']] *12],\n// [],\n// [],\n// [] *20","map":{"version":3,"sources":["/Users/jovangoh/Desktop/tetris-react/src/gameHelpers.js"],"names":["STAGE_WIDTH","STAGE_HEIGHT","createStage","Array","from","fill","checkCollision","player","stage","x","moveX","y","moveY","tetromino","length","pos"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,EAApB;AACP,OAAO,MAAMC,YAAY,GAAG,EAArB,C,CAEP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,MACzBC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACF,YAAD,CAAhB,EAAgC,MAC9B,IAAIE,KAAJ,CAAUH,WAAV,EAAuBK,IAAvB,CAA4B,CAAC,CAAD,EAAI,OAAJ,CAA5B,CADF,CADK;AAKP,OAAO,MAAMC,cAAc,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgB;AAAEC,EAAAA,CAAC,EAAEC,KAAL;AAAYC,EAAAA,CAAC,EAAEC;AAAf,CAAhB,KAA2C;AACvE,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACM,SAAP,CAAiBC,MAArC,EAA6CH,CAAC,IAAI,CAAlD,EAAqD;AACnD,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACM,SAAP,CAAiBC,MAArC,EAA6CL,CAAC,IAAI,CAAlD,EAAqD;AACnD;AACA,UAAIF,MAAM,CAACM,SAAP,CAAiBF,CAAjB,EAAoBF,CAApB,MAA2B,CAA/B,EAAkC;AAChC,aACE;AACA,SAACD,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWJ,CAAf,GAAmBC,KAApB,CAAN,IACA;AACA,SAACJ,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWJ,CAAf,GAAmBC,KAApB,CAAL,CAAgCH,CAAC,GAAGF,MAAM,CAACQ,GAAP,CAAWN,CAAf,GAAmBC,KAAnD,CAFD,IAGA;AACAF,QAAAA,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWJ,CAAf,GAAmBC,KAApB,CAAL,CAAgCH,CAAC,GAAGF,MAAM,CAACQ,GAAP,CAAWN,CAAf,GAAmBC,KAAnD,EAA0D,CAA1D,MACE,OAPJ,EAQE;AACA,iBAAO,IAAP,CADA,CACa;AACd;AACF;AACF;AACF;AACF,CAnBM,C,CAqBP;AACA;AACA;AACA;AACA","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\n// function to create the stage\n//multi-dimensional array to create the grid\n//Array from something, another array 'stageHeight'\n//for each row, create a new array 'stageWidth, and fill it with another array\n//fill 0 means nothing, clear going to merge, tetromino that collided\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () =>\n    new Array(STAGE_WIDTH).fill([0, \"clear\"])\n  );\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino.length; x += 1) {\n      //1. Check that we're on a actual tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if (\n          //2. Check that our move is inside the game area (y)\n          !stage[y + player.pos.y + moveY] ||\n          //3. Check that our move is inside the game area width (x)\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n          //4. Check that the call we're moving is set to 'clear'\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n            \"clear\"\n        ) {\n          return true; //the above happen then it is collided 'true'\n        }\n      }\n    }\n  }\n};\n\n// console.log(createStage());\n// [[[0,'clear']],[[0,'clear']],[[0,'clear']],[[0,'clear']] *12],\n// [],\n// [],\n// [] *20\n"]},"metadata":{},"sourceType":"module"}