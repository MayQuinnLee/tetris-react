{"ast":null,"code":"import _objectSpread from \"/Users/jovangoh/Desktop/tetris-react/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/jovangoh/Desktop/tetris-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from \"react\";\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\nimport { STAGE_WIDTH } from \"../gameHelpers\";\nexport const usePlayer = props => {\n  const _useState = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        player = _useState2[0],\n        setPlayer = _useState2[1];\n\n  const rotate = (tetromino, direction) => {\n    //Make the rows become columns (transpose)\n    const rotatedTetro = tetromino.map((_, index) => {\n      console.log(tetromino);\n      tetromino.map(col => col[index]);\n    });\n  };\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => _objectSpread({}, prev, {\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer];\n};","map":{"version":3,"sources":["/Users/jovangoh/Desktop/tetris-react/src/hooks/usePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","usePlayer","props","pos","x","y","tetromino","shape","collided","player","setPlayer","rotate","direction","rotatedTetro","map","_","index","console","log","col","updatePlayerPos","prev","resetPlayer"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,eAA5C;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA,oBACNN,QAAQ,CAAC;AACnCO,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAD8B;AAEnCC,IAAAA,SAAS,EAAER,UAAU,CAAC,CAAD,CAAV,CAAcS,KAFU;AAGnCC,IAAAA,QAAQ,EAAE;AAHyB,GAAD,CADF;AAAA;AAAA,QAC3BC,MAD2B;AAAA,QACnBC,SADmB;;AAOlC,QAAMC,MAAM,GAAG,CAACL,SAAD,EAAYM,SAAZ,KAA0B;AACvC;AACA,UAAMC,YAAY,GAAGP,SAAS,CAACQ,GAAV,CAAc,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAC/CC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,SAAZ;AACAA,MAAAA,SAAS,CAACQ,GAAV,CAAeK,GAAD,IAASA,GAAG,CAACH,KAAD,CAA1B;AACD,KAHoB,CAArB;AAID,GAND;;AAQA,QAAMI,eAAe,GAAG,CAAC;AAAEhB,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQG,IAAAA;AAAR,GAAD,KAAwB;AAC9CE,IAAAA,SAAS,CAAEW,IAAD,sBACLA,IADK;AAERlB,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGiB,IAAI,CAAClB,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGgB,IAAI,CAAClB,GAAL,CAASE,CAAT,IAAcA;AAA1C,OAFG;AAGRG,MAAAA;AAHQ,MAAD,CAAT;AAKD,GAND;;AAQA,QAAMc,WAAW,GAAGzB,WAAW,CAAC,MAAM;AACpCa,IAAAA,SAAS,CAAC;AACRP,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAEJ,WAAW,GAAG,CAAd,GAAkB,CAAvB;AAA0BK,QAAAA,CAAC,EAAE;AAA7B,OADG;AAERC,MAAAA,SAAS,EAAEP,eAAe,GAAGQ,KAFrB;AAGRC,MAAAA,QAAQ,EAAE;AAHF,KAAD,CAAT;AAKD,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACC,MAAD,EAASW,eAAT,EAA0BE,WAA1B,CAAP;AACD,CAhCM","sourcesContent":["import { useState, useCallback } from \"react\";\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\nimport { STAGE_WIDTH } from \"../gameHelpers\";\n\nexport const usePlayer = (props) => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const rotate = (tetromino, direction) => {\n    //Make the rows become columns (transpose)\n    const rotatedTetro = tetromino.map((_, index) => {\n      console.log(tetromino);\n      tetromino.map((col) => col[index]);\n    });\n  };\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer((prev) => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer];\n};\n"]},"metadata":{},"sourceType":"module"}