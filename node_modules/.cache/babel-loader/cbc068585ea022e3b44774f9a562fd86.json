{"ast":null,"code":"import _objectSpread from \"/Users/jovangoh/Desktop/tetris-react/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/jovangoh/Desktop/tetris-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from \"react\";\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\nimport { STAGE_WIDTH, checkCollision } from \"../gameHelpers\";\nexport const usePlayer = props => {\n  const _useState = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        player = _useState2[0],\n        setPlayer = _useState2[1];\n\n  const rotate = (tetromino, direction) => {\n    //Make the rows become columns (transpose)\n    const rotatedTetris = tetromino.map((_, index //y0\n    ) => tetromino.map(col => {\n      console.log(tetromino);\n      console.log(col);\n      console.log(index);\n      console.log(col[index]);\n      return col[index];\n    })); //Reverse each row to get a rotated tetris\n    // console.log(rotatedTetris);\n    // console.log(rotatedTetris.reverse());\n\n    if (direction > 0) return rotatedTetris.map(row => row.reverse());\n    return rotatedTetris.reverse();\n  };\n\n  const playerRotate = (stage, direction) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, direction); //fix rotating out of the stage\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      console.log(\"check-collision\");\n      console.log(offset);\n      clonedPlayer.pos.x += offset; //to keep track how many steps we moved\n\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      console.log(offset);\n\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -direction);\n        clonedPlayer.pos.x = pos;\n        console.log(pos);\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => _objectSpread({}, prev, {\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};","map":{"version":3,"sources":["/Users/jovangoh/Desktop/tetris-react/src/hooks/usePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","checkCollision","usePlayer","props","pos","x","y","tetromino","shape","collided","player","setPlayer","rotate","direction","rotatedTetris","map","_","index","col","console","log","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","length","updatePlayerPos","prev","resetPlayer"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,eAA5C;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,gBAA5C;AAEA,OAAO,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA,oBACNP,QAAQ,CAAC;AACnCQ,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAD8B;AAEnCC,IAAAA,SAAS,EAAET,UAAU,CAAC,CAAD,CAAV,CAAcU,KAFU;AAGnCC,IAAAA,QAAQ,EAAE;AAHyB,GAAD,CADF;AAAA;AAAA,QAC3BC,MAD2B;AAAA,QACnBC,SADmB;;AAOlC,QAAMC,MAAM,GAAG,CAACL,SAAD,EAAYM,SAAZ,KAA0B;AACvC;AACA,UAAMC,aAAa,GAAGP,SAAS,CAACQ,GAAV,CAAc,CAClCC,CADkC,EAElCC,KAFkC,CAE5B;AAF4B,SAIlCV,SAAS,CAACQ,GAAV,CAAeG,GAAD,IAAS;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYb,SAAZ;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACD,KAAD,CAAf;AACA,aAAOC,GAAG,CAACD,KAAD,CAAV;AACD,KAND,CAJoB,CAAtB,CAFuC,CAcvC;AACA;AACA;;AACA,QAAIJ,SAAS,GAAG,CAAhB,EAAmB,OAAOC,aAAa,CAACC,GAAd,CAAmBM,GAAD,IAASA,GAAG,CAACC,OAAJ,EAA3B,CAAP;AACnB,WAAOR,aAAa,CAACQ,OAAd,EAAP;AACD,GAnBD;;AAqBA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQX,SAAR,KAAsB;AACzC,UAAMY,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAelB,MAAf,CAAX,CAArB;AACAe,IAAAA,YAAY,CAAClB,SAAb,GAAyBK,MAAM,CAACa,YAAY,CAAClB,SAAd,EAAyBM,SAAzB,CAA/B,CAFyC,CAIzC;;AACA,UAAMT,GAAG,GAAGqB,YAAY,CAACrB,GAAb,CAAiBC,CAA7B;AACA,QAAIwB,MAAM,GAAG,CAAb;;AACA,WAAO5B,cAAc,CAACwB,YAAD,EAAeD,KAAf,EAAsB;AAAEnB,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAAtB,CAArB,EAA4D;AAC1Da,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYS,MAAZ;AACAJ,MAAAA,YAAY,CAACrB,GAAb,CAAiBC,CAAjB,IAAsBwB,MAAtB,CAH0D,CAI1D;;AACAA,MAAAA,MAAM,GAAG,EAAEA,MAAM,IAAIA,MAAM,GAAG,CAAT,GAAa,CAAb,GAAiB,CAAC,CAAtB,CAAR,CAAT;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYS,MAAZ;;AACA,UAAIA,MAAM,GAAGJ,YAAY,CAAClB,SAAb,CAAuB,CAAvB,EAA0BuB,MAAvC,EAA+C;AAC7ClB,QAAAA,MAAM,CAACa,YAAY,CAAClB,SAAd,EAAyB,CAACM,SAA1B,CAAN;AACAY,QAAAA,YAAY,CAACrB,GAAb,CAAiBC,CAAjB,GAAqBD,GAArB;AACAe,QAAAA,OAAO,CAACC,GAAR,CAAYhB,GAAZ;AACA;AACD;AACF;;AAEDO,IAAAA,SAAS,CAACc,YAAD,CAAT;AACD,GAvBD;;AAyBA,QAAMM,eAAe,GAAG,CAAC;AAAE1B,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQG,IAAAA;AAAR,GAAD,KAAwB;AAC9CE,IAAAA,SAAS,CAAEqB,IAAD,sBACLA,IADK;AAER5B,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAG2B,IAAI,CAAC5B,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAG0B,IAAI,CAAC5B,GAAL,CAASE,CAAT,IAAcA;AAA1C,OAFG;AAGRG,MAAAA;AAHQ,MAAD,CAAT;AAKD,GAND;;AAQA,QAAMwB,WAAW,GAAGpC,WAAW,CAAC,MAAM;AACpCc,IAAAA,SAAS,CAAC;AACRP,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAEL,WAAW,GAAG,CAAd,GAAkB,CAAvB;AAA0BM,QAAAA,CAAC,EAAE;AAA7B,OADG;AAERC,MAAAA,SAAS,EAAER,eAAe,GAAGS,KAFrB;AAGRC,MAAAA,QAAQ,EAAE;AAHF,KAAD,CAAT;AAKD,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACC,MAAD,EAASqB,eAAT,EAA0BE,WAA1B,EAAuCV,YAAvC,CAAP;AACD,CAtEM","sourcesContent":["import { useState, useCallback } from \"react\";\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\nimport { STAGE_WIDTH, checkCollision } from \"../gameHelpers\";\n\nexport const usePlayer = (props) => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const rotate = (tetromino, direction) => {\n    //Make the rows become columns (transpose)\n    const rotatedTetris = tetromino.map((\n      _,\n      index //y0\n    ) =>\n      tetromino.map((col) => {\n        console.log(tetromino);\n        console.log(col);\n        console.log(index);\n        console.log(col[index]);\n        return col[index];\n      })\n    );\n    //Reverse each row to get a rotated tetris\n    // console.log(rotatedTetris);\n    // console.log(rotatedTetris.reverse());\n    if (direction > 0) return rotatedTetris.map((row) => row.reverse());\n    return rotatedTetris.reverse();\n  };\n\n  const playerRotate = (stage, direction) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, direction);\n\n    //fix rotating out of the stage\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      console.log(\"check-collision\");\n      console.log(offset);\n      clonedPlayer.pos.x += offset;\n      //to keep track how many steps we moved\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      console.log(offset);\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -direction);\n        clonedPlayer.pos.x = pos;\n        console.log(pos);\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer((prev) => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n"]},"metadata":{},"sourceType":"module"}