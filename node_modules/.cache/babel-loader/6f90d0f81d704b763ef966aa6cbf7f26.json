{"ast":null,"code":"import _slicedToArray from \"/Users/jovangoh/Desktop/tetris-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jovangoh/Desktop/tetris-react/src/components/Tetris.js\";\nimport React, { useState } from \"react\";\nimport { createStage, checkCollision } from \"../gameHelpers\"; // create clean state\n\nimport Stage from \"./Stage\";\nimport Display from \"./Display\";\nimport StartButton from \"./StartButton\";\nimport { useInterval } from \"../hooks/useInterval\";\nimport { usePlayer } from \"../hooks/usePlayer\";\nimport { useStage } from \"../hooks/useStage\";\nimport { useGameStatus } from \"../hooks/useGameStatus\";\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/StyledTetris\";\n\nconst Tetris = props => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        dropTime = _useState2[0],\n        setDropTime = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameOver = _useState4[0],\n        setGameOver = _useState4[1];\n\n  const _usePlayer = usePlayer(),\n        _usePlayer2 = _slicedToArray(_usePlayer, 4),\n        player = _usePlayer2[0],\n        updatePlayerPos = _usePlayer2[1],\n        resetPlayer = _usePlayer2[2],\n        playerRotate = _usePlayer2[3];\n\n  const _useStage = useStage(player, resetPlayer),\n        _useStage2 = _slicedToArray(_useStage, 3),\n        stage = _useStage2[0],\n        setStage = _useStage2[1],\n        rowsCleared = _useStage2[2];\n\n  const _useGameStatus = useGameStatus(rowsCleared),\n        _useGameStatus2 = _slicedToArray(_useGameStatus, 6),\n        score = _useGameStatus2[0],\n        setScore = _useGameStatus2[1],\n        rows = _useGameStatus2[2],\n        setRows = _useGameStatus2[3],\n        level = _useGameStatus2[4],\n        setLevel = _useGameStatus2[5]; // console.log(\"re-render\");\n  //Moving tetromino left or right\n\n\n  const movePlayer = direction => {\n    if (!checkCollision(player, stage, {\n      x: direction,\n      y: 0\n    })) {\n      updatePlayerPos({\n        x: direction,\n        y: 0\n      });\n    }\n  }; //Reset everything\n\n\n  const startGame = () => {\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setGameOver(false);\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n    console.log(\"I am the one\");\n  };\n\n  const drop = () => {\n    //Increase level and dropTime when every 10 rows are cleared\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1);\n      setDropTime(1000 / (level + 1) + 200); //TODO: Amend dropTime\n    } //if checkCollision is false, 'not collided'\n\n\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      //Check if game over\n      if (player.pos.y < 1) {\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  }; //on keyup\n\n\n  const keyUp = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        drop();\n        setDropTime(1000 / (level + 1) + 200);\n        console.log(\"set-interval on\");\n      }\n    }\n  }; //onkey down\n\n\n  const dropPlayer = () => {\n    drop();\n    setDropTime(null);\n    console.log(\"set-interval off\");\n  }; //on space bar\n\n\n  const dropDown = () => {\n    console.log(\"space bar\");\n\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const move = ({\n    keyCode\n  }) => {\n    //destructuring 'keycode' from event (if not, use e.keycode)\n    console.log(keyCode);\n\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 32) {\n        dropDown();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    } // TODO: add space bar\n\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n  return React.createElement(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => move(e),\n    onKeyUp: keyUp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(StyledTetris, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(Stage, {\n    stage: stage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), \" \", React.createElement(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, gameOver ? React.createElement(Display, {\n    gameOver: gameOver,\n    text: \"Game Over\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Display, {\n    text: `Score: ${score}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), React.createElement(Display, {\n    text: `Rows: ${rows}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }), React.createElement(Display, {\n    text: `Level: ${level}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  })), React.createElement(StartButton, {\n    callback: startGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }))));\n};\n\nexport default Tetris;","map":{"version":3,"sources":["/Users/jovangoh/Desktop/tetris-react/src/components/Tetris.js"],"names":["React","useState","createStage","checkCollision","Stage","Display","StartButton","useInterval","usePlayer","useStage","useGameStatus","StyledTetrisWrapper","StyledTetris","Tetris","props","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","rowsCleared","score","setScore","rows","setRows","level","setLevel","movePlayer","direction","x","y","startGame","console","log","drop","prev","collided","pos","keyUp","keyCode","dropPlayer","dropDown","move","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { createStage, checkCollision } from \"../gameHelpers\"; // create clean state\n\nimport Stage from \"./Stage\";\nimport Display from \"./Display\";\nimport StartButton from \"./StartButton\";\n\nimport { useInterval } from \"../hooks/useInterval\";\nimport { usePlayer } from \"../hooks/usePlayer\";\nimport { useStage } from \"../hooks/useStage\";\nimport { useGameStatus } from \"../hooks/useGameStatus\";\n\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/StyledTetris\";\n\nconst Tetris = (props) => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n    rowsCleared\n  );\n\n  // console.log(\"re-render\");\n\n  //Moving tetromino left or right\n  const movePlayer = (direction) => {\n    if (!checkCollision(player, stage, { x: direction, y: 0 })) {\n      updatePlayerPos({ x: direction, y: 0 });\n    }\n  };\n\n  //Reset everything\n  const startGame = () => {\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setGameOver(false);\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n    console.log(\"I am the one\");\n  };\n\n  const drop = () => {\n    //Increase level and dropTime when every 10 rows are cleared\n    if (rows > (level + 1) * 10) {\n      setLevel((prev) => prev + 1);\n      setDropTime(1000 / (level + 1) + 200);\n      //TODO: Amend dropTime\n    }\n\n    //if checkCollision is false, 'not collided'\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 1, collided: false });\n    } else {\n      //Check if game over\n      if (player.pos.y < 1) {\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  //on keyup\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        drop();\n        setDropTime(1000 / (level + 1) + 200);\n        console.log(\"set-interval on\");\n      }\n    }\n  };\n\n  //onkey down\n  const dropPlayer = () => {\n    drop();\n    setDropTime(null);\n    console.log(\"set-interval off\");\n  };\n\n  //on space bar\n  const dropDown = () => {\n    console.log(\"space bar\");\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  const move = ({ keyCode }) => {\n    //destructuring 'keycode' from event (if not, use e.keycode)\n    console.log(keyCode);\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 32) {\n        dropDown();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    } // TODO: add space bar\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  return (\n    <StyledTetrisWrapper\n      role=\"button\"\n      tabIndex=\"0\"\n      onKeyDown={(e) => move(e)}\n      onKeyUp={keyUp}\n    >\n      <StyledTetris>\n        <Stage stage={stage} /> {/*initially is createStage() */}\n        <aside>\n          {gameOver ? (\n            <Display gameOver={gameOver} text=\"Game Over\" />\n          ) : (\n            <div>\n              <Display text={`Score: ${score}`} />\n              <Display text={`Rows: ${rows}`} />\n              <Display text={`Level: ${level}`} />\n            </div>\n          )}\n          <StartButton callback={startGame} />\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n"]},"metadata":{},"sourceType":"module"}