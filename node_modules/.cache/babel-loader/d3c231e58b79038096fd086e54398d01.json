{"ast":null,"code":"import _slicedToArray from \"/Users/jovangoh/Desktop/tetris-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jovangoh/Desktop/tetris-react/src/components/Tetris/Tetris.js\";\nimport React, { useState } from \"react\";\nimport { createStage, checkCollision } from \"../../gameHelpers\"; // create clean state\n\nimport Stage from \"../Stage/Stage\";\nimport Display from \"../Display/Display\";\nimport StartButton from \"../StartButton/StartButton\";\nimport { usePlayer } from \"../../hooks/usePlayer\";\nimport { useStage } from \"../../hooks/useStage\";\nimport classes from \"./Tetris.module.css\";\n\nconst Tetris = props => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        dropTime = _useState2[0],\n        setDropTime = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameOver = _useState4[0],\n        setGameOver = _useState4[1];\n\n  const _usePlayer = usePlayer(),\n        _usePlayer2 = _slicedToArray(_usePlayer, 4),\n        player = _usePlayer2[0],\n        updatePlayerPos = _usePlayer2[1],\n        resetPlayer = _usePlayer2[2],\n        playerRotate = _usePlayer2[3];\n\n  const _useStage = useStage(player, resetPlayer),\n        _useStage2 = _slicedToArray(_useStage, 2),\n        stage = _useStage2[0],\n        setStage = _useStage2[1]; // console.log(\"re-render\");\n\n\n  const movePlayer = direction => {\n    if (!checkCollision(player, stage, {\n      x: direction,\n      y: 0\n    })) {\n      updatePlayerPos({\n        x: direction,\n        y: 0\n      });\n      console.log(\"move tetris\");\n    }\n  };\n\n  const startGame = () => {\n    //reset everything\n    setStage(createStage());\n    resetPlayer();\n    setGameOver(false);\n  };\n\n  const drop = () => {\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      //if checkCollision is false, 'not collided'\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      if (player.pos.y < 1) {\n        console.log(\"game over\");\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const dropPlayer = () => {\n    drop();\n  };\n\n  const move = ({\n    keyCode\n  }) => {\n    //destructuring 'keycode' from event (if not, use e.keycode)\n    // console.log(keyCode);\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    } // TODO: add space bar\n\n  };\n\n  return React.createElement(\"div\", {\n    className: classes.TetrisWrapper,\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => move(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.Tetris,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Stage, {\n    stage: stage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), \" \", React.createElement(\"aside\", {\n    className: classes.Sidebar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, gameOver ? React.createElement(Display, {\n    gameOver: gameOver,\n    text: \"Game Over\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Display, {\n    text: \"Score\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(Display, {\n    text: \"Rows\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(Display, {\n    text: \"Level\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), React.createElement(StartButton, {\n    callback: startGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }))));\n};\n\nexport default Tetris;","map":{"version":3,"sources":["/Users/jovangoh/Desktop/tetris-react/src/components/Tetris/Tetris.js"],"names":["React","useState","createStage","checkCollision","Stage","Display","StartButton","usePlayer","useStage","classes","Tetris","props","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","movePlayer","direction","x","y","console","log","startGame","drop","collided","pos","dropPlayer","move","keyCode","TetrisWrapper","e","Sidebar"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,mBAA5C,C,CAAiE;;AAEjE,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,OAAOC,OAAP,MAAoB,qBAApB;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA,oBACQV,QAAQ,CAAC,IAAD,CADhB;AAAA;AAAA,QACjBW,QADiB;AAAA,QACPC,WADO;;AAAA,qBAEQZ,QAAQ,CAAC,KAAD,CAFhB;AAAA;AAAA,QAEjBa,QAFiB;AAAA,QAEPC,WAFO;;AAAA,qBAIqCR,SAAS,EAJ9C;AAAA;AAAA,QAIjBS,MAJiB;AAAA,QAITC,eAJS;AAAA,QAIQC,WAJR;AAAA,QAIqBC,YAJrB;;AAAA,oBAKEX,QAAQ,CAACQ,MAAD,EAASE,WAAT,CALV;AAAA;AAAA,QAKjBE,KALiB;AAAA,QAKVC,QALU,kBAOxB;;;AAEA,QAAMC,UAAU,GAAIC,SAAD,IAAe;AAChC,QAAI,CAACpB,cAAc,CAACa,MAAD,EAASI,KAAT,EAAgB;AAAEI,MAAAA,CAAC,EAAED,SAAL;AAAgBE,MAAAA,CAAC,EAAE;AAAnB,KAAhB,CAAnB,EAA4D;AAC1DR,MAAAA,eAAe,CAAC;AAAEO,QAAAA,CAAC,EAAED,SAAL;AAAgBE,QAAAA,CAAC,EAAE;AAAnB,OAAD,CAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD;AACF,GALD;;AAOA,QAAMC,SAAS,GAAG,MAAM;AACtB;AACAP,IAAAA,QAAQ,CAACnB,WAAW,EAAZ,CAAR;AACAgB,IAAAA,WAAW;AACXH,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GALD;;AAOA,QAAMc,IAAI,GAAG,MAAM;AACjB,QAAI,CAAC1B,cAAc,CAACa,MAAD,EAASI,KAAT,EAAgB;AAAEI,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAAhB,CAAnB,EAAoD;AAClD;AACAR,MAAAA,eAAe,CAAC;AAAEO,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE,CAAX;AAAcK,QAAAA,QAAQ,EAAE;AAAxB,OAAD,CAAf;AACD,KAHD,MAGO;AACL,UAAId,MAAM,CAACe,GAAP,CAAWN,CAAX,GAAe,CAAnB,EAAsB;AACpBC,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAZ,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AACDI,MAAAA,eAAe,CAAC;AAAEO,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE,CAAX;AAAcK,QAAAA,QAAQ,EAAE;AAAxB,OAAD,CAAf;AACD;AACF,GAZD;;AAcA,QAAME,UAAU,GAAG,MAAM;AACvBH,IAAAA,IAAI;AACL,GAFD;;AAIA,QAAMI,IAAI,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAiB;AAC5B;AACA;AACA,QAAI,CAACpB,QAAL,EAAe;AACb,UAAIoB,OAAO,KAAK,EAAhB,EAAoB;AAClBZ,QAAAA,UAAU,CAAC,CAAC,CAAF,CAAV;AACD,OAFD,MAEO,IAAIY,OAAO,KAAK,EAAhB,EAAoB;AACzBZ,QAAAA,UAAU,CAAC,CAAD,CAAV;AACD,OAFM,MAEA,IAAIY,OAAO,KAAK,EAAhB,EAAoB;AACzBF,QAAAA,UAAU;AACX,OAFM,MAEA,IAAIE,OAAO,KAAK,EAAhB,EAAoB;AACzBf,QAAAA,YAAY,CAACC,KAAD,EAAQ,CAAR,CAAZ;AACD;AACF,KAb2B,CAa1B;;AACH,GAdD;;AAgBA,SACE;AACE,IAAA,SAAS,EAAEX,OAAO,CAAC0B,aADrB;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,QAAQ,EAAC,GAHX;AAIE,IAAA,SAAS,EAAGC,CAAD,IAAOH,IAAI,CAACG,CAAD,CAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AAAK,IAAA,SAAS,EAAE3B,OAAO,CAACC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEU,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,OAEE;AAAO,IAAA,SAAS,EAAEX,OAAO,CAAC4B,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGvB,QAAQ,GACP,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEA,QAAnB;AAA6B,IAAA,IAAI,EAAC,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADO,GAGP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAJJ,EAUE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAEc,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CAFF,CANF,CADF;AAwBD,CAjFD;;AAmFA,eAAelB,MAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { createStage, checkCollision } from \"../../gameHelpers\"; // create clean state\n\nimport Stage from \"../Stage/Stage\";\nimport Display from \"../Display/Display\";\nimport StartButton from \"../StartButton/StartButton\";\n\nimport { usePlayer } from \"../../hooks/usePlayer\";\nimport { useStage } from \"../../hooks/useStage\";\n\nimport classes from \"./Tetris.module.css\";\n\nconst Tetris = (props) => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage] = useStage(player, resetPlayer);\n\n  // console.log(\"re-render\");\n\n  const movePlayer = (direction) => {\n    if (!checkCollision(player, stage, { x: direction, y: 0 })) {\n      updatePlayerPos({ x: direction, y: 0 });\n      console.log(\"move tetris\");\n    }\n  };\n\n  const startGame = () => {\n    //reset everything\n    setStage(createStage());\n    resetPlayer();\n    setGameOver(false);\n  };\n\n  const drop = () => {\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      //if checkCollision is false, 'not collided'\n      updatePlayerPos({ x: 0, y: 1, collided: false });\n    } else {\n      if (player.pos.y < 1) {\n        console.log(\"game over\");\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  const dropPlayer = () => {\n    drop();\n  };\n\n  const move = ({ keyCode }) => {\n    //destructuring 'keycode' from event (if not, use e.keycode)\n    // console.log(keyCode);\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    } // TODO: add space bar\n  };\n\n  return (\n    <div\n      className={classes.TetrisWrapper}\n      role=\"button\"\n      tabIndex=\"0\"\n      onKeyDown={(e) => move(e)}\n    >\n      <div className={classes.Tetris}>\n        <Stage stage={stage} /> {/*initially is createStage() */}\n        <aside className={classes.Sidebar}>\n          {gameOver ? (\n            <Display gameOver={gameOver} text=\"Game Over\" />\n          ) : (\n            <div>\n              <Display text=\"Score\" />\n              <Display text=\"Rows\" />\n              <Display text=\"Level\" />\n            </div>\n          )}\n          <StartButton callback={startGame} />\n        </aside>\n      </div>\n    </div>\n  );\n};\n\nexport default Tetris;\n"]},"metadata":{},"sourceType":"module"}