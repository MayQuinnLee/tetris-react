{"ast":null,"code":"import _slicedToArray from \"/Users/jovangoh/Desktop/tetris-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  const _useState = useState(createStage()),\n        _useState2 = _slicedToArray(_useState, 2),\n        stage = _useState2[0],\n        setStage = _useState2[1];\n\n  useEffect(() => {\n    const updateStage = prevStage => {\n      //first clear 'flush' the stage\n      const newStage = prevStage.map((row //multidimensional array hence 2 maps, if performance is priority use for loop\n      ) => row.map(cell => cell[1] === \"clear\" ? [0, \"clear\"] : cell)); //refer to gamehelper for cell[1]\n      //draw the tetromino, getting to know the tetromino pass down\n      //player from usePlayer() to Tetris.js to useStage\n      //y is the index number\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [//the coordinate on the stage\n            value, `${player.collided ? \"merged\" : \"clear\"}` //checking the stage to merge with the tetromino or not\n            ];\n            console.log(y);\n          }\n        });\n      });\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player.pos.y, player.pos.x, player.tetromino, player.collided]);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/Users/jovangoh/Desktop/tetris-react/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","pos","collided","console","log","prev"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAAA,oBACrBL,QAAQ,CAACE,WAAW,EAAZ,CADa;AAAA;AAAA,QACxCI,KADwC;AAAA,QACjCC,QADiC;;AAG/CN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,WAAW,GAAIC,SAAD,IAAe;AACjC;AACA,YAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAc,CAC7BC,GAD6B,CACzB;AADyB,WAE1BA,GAAG,CAACD,GAAJ,CAASE,IAAD,IAAWA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAxD,CAFY,CAAjB,CAFiC,CAKjC;AAEA;AACA;AACA;;AACAT,MAAAA,MAAM,CAACU,SAAP,CAAiBC,OAAjB,CAAyB,CAACH,GAAD,EAAMI,CAAN,KAAY;AACnCJ,QAAAA,GAAG,CAACG,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACxB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACfP,YAAAA,QAAQ,CAACM,CAAC,GAAGZ,MAAM,CAACe,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGd,MAAM,CAACe,GAAP,CAAWD,CAA1C,IAA+C,CAC7C;AACAD,YAAAA,KAF6C,EAG5C,GAAEb,MAAM,CAACgB,QAAP,GAAkB,QAAlB,GAA6B,OAAQ,EAHK,CAGF;AAHE,aAA/C;AAKAC,YAAAA,OAAO,CAACC,GAAR,CAAYN,CAAZ;AACD;AACF,SATD;AAUD,OAXD;AAYA,aAAON,QAAP;AACD,KAvBD;;AAyBAH,IAAAA,QAAQ,CAAEgB,IAAD,IAAUf,WAAW,CAACe,IAAD,CAAtB,CAAR;AACD,GA3BQ,EA2BN,CAACnB,MAAM,CAACe,GAAP,CAAWH,CAAZ,EAAeZ,MAAM,CAACe,GAAP,CAAWD,CAA1B,EAA6Bd,MAAM,CAACU,SAApC,EAA+CV,MAAM,CAACgB,QAAtD,CA3BM,CAAT;AA6BA,SAAO,CAACd,KAAD,EAAQC,QAAR,CAAP;AACD,CAjCM","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n\n  useEffect(() => {\n    const updateStage = (prevStage) => {\n      //first clear 'flush' the stage\n      const newStage = prevStage.map((\n        row //multidimensional array hence 2 maps, if performance is priority use for loop\n      ) => row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell)));\n      //refer to gamehelper for cell[1]\n\n      //draw the tetromino, getting to know the tetromino pass down\n      //player from usePlayer() to Tetris.js to useStage\n      //y is the index number\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              //the coordinate on the stage\n              value,\n              `${player.collided ? \"merged\" : \"clear\"}`, //checking the stage to merge with the tetromino or not\n            ];\n            console.log(y);\n          }\n        });\n      });\n      return newStage;\n    };\n\n    setStage((prev) => updateStage(prev));\n  }, [player.pos.y, player.pos.x, player.tetromino, player.collided]);\n\n  return [stage, setStage];\n};\n"]},"metadata":{},"sourceType":"module"}